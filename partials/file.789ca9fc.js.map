{"mappings":"khBAAA,aACAA,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAiBC,GAEb,OAAOA,GAAOA,EAAIC,cAAgBC,OAAS,gBAAkBF,MCNjEG,EAAA,SAAKC,QAAQC,IAAK,uCAeW,IANP,IAMTC,EAAI,EAAGA,GAJE,GAIcA,GAAK,EAAG,CAGrBC,KAAKC,MACC,KAAjBD,KAAKE,SAVK,KAoBrBL,QAEYC,IAAK,iCAYSD,QAAdC,IAAK,2CAsBkBD,QAAvBC,IAAK,UA4BbD,QAAQC,IAAK,UAKd,IAQKK,GAAW,EAAXC,GAAW,EAAXC,OAAWC,E,IAAhB,QAAKC,EAAAC,EARQ,CAAC,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IAQ5Bb,OAAAc,cAAnBN,GAAAI,EAAAC,EAAWE,QAAAC,MAAXR,GAAW,GAAXI,EAAWhB,O,SAAXa,GAAW,EAAXC,EAAWO,E,YAAXT,GAAW,MAAXK,EAAWK,QAAXL,EAAWK,S,WAAXT,E,MAAAC,GAOJR,QAAQC,IAAK,YASC,IAJf,IAAMgB,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,IAI3CC,EAAI,EAAGA,EAAID,EAAQE,OAAQD,GAAK,EAKrCD,EAAQC,GAAK,GAAM,GAIVD,EAAQC,GAOpBlB,QAAQC,IAAK,YAIV,IAGCmB,GAAY,EAAZC,GAAY,EAAZC,OAAYb,E,IAAjB,QAAKc,EAAAC,EAHe,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,IAG5B1B,OAAAc,cAAvBQ,GAAAG,EAAAC,EAAYX,QAAAC,MAAZM,GAAY,GAAZ,IAAMK,EAANF,EAAY7B,MAGT+B,EAAS,GAAM,GAGNA,G,SANZJ,GAAY,EAAZC,EAAYP,E,YAAZK,GAAY,MAAZI,EAAYR,QAAZQ,EAAYR,S,WAAZK,E,MAAAC,GAYJtB,QAAQC,IAAK,YAIV,IAGCyB,GAAY,EAAZC,GAAY,EAAZC,OAAYnB,E,IAAjB,QAAKoB,EAAAC,EAHe,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,IAG5BhC,OAAAc,cAAvBc,GAAAG,EAAAC,EAAYjB,QAAAC,MAAZY,GAAY,EAAa,CAAzB,IAAMK,EAANF,EAAYnC,MAGTqC,EAAS,GAAM,GAKVA,G,SARRJ,GAAY,EAAZC,EAAYb,E,YAAZW,GAAY,MAAZI,EAAYd,QAAZc,EAAYd,S,WAAZW,E,MAAAC,GAcJ5B,QAAQC,IAAK,YAaM,IAJpB,IAAM+B,EAAS,CAAE,YAAa,aAAc,aAAc,cACpDC,EAAe,aAGZC,GAFK,gBAAwCC,OAAZF,EAAY,eAEzC,GAAGC,EAAIF,EAAOb,OAAQe,GAAK,EAAG,CAKvC,GAJcF,EAAOE,KAIPD,EAAa,CACb,gBAAwCE,OAAZF,EAAY,YAChC,OAMzBjC,QAAQC,IAAK,YAOd,IACMmC,EAAe,aAGIC,GAFX,gBAAwCF,OAAZC,EAAY,gBAEtC,GAAXE,GAAW,EAAXC,OAAW9B,E,IAAhB,QAAK+B,EAAAC,EAJU,CAAE,YAAa,aAAc,aAAc,cAIhC3C,OAAAc,cAArByB,GAAAG,EAAAC,EAAW5B,QAAAC,MAAXuB,GAAW,GACJ,GADPG,EAAW9C,QACU0C,EAAa,CACrB,gBAAwCD,OAAZC,EAAY,YAChC,Q,SAHrBE,GAAW,EAAXC,EAAWxB,E,YAAXsB,GAAW,MAAXI,EAAWzB,QAAXyB,EAAWzB,S,WAAXsB,E,MAAAC,GASRvC,QAEYC,IAAK,YAWbD,QAAQC,IAAK,YAQd,IACMyC,EAAe,aADN,CAAE,YAAa,aAAc,aAAc,cAKnCC,SAASD,GAAe,gBAAwCP,OAAZO,EAAY,YAAkB,gBAAwCP,OAAZO,EAAY,eAMhJ1C,QAAQC,IAAK,UAMd,IAAM2C,EAAU,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,IACpCC,EAAiBD,EAAQ,GAExBE,GAAY,EAAZC,GAAY,EAAZC,OAAYvC,E,IAAjB,QAAKwC,EAAAC,EAAgBN,EAAO9C,OAAAc,cAAvBkC,GAAAG,EAAAC,EAAYrC,QAAAC,MAAZgC,GAAY,GAAZ,IAAMK,EAANF,EAAYvD,MACbyD,EAASN,IACLA,EAAiBM,I,SAFpBJ,GAAY,EAAZC,EAAYjC,E,YAAZ+B,GAAY,MAAZI,EAAYlC,QAAZkC,EAAYlC,S,WAAZ+B,E,MAAAC,GAOD,IAAII,EAAgBR,EAAQ,GAEvBS,GAAY,EAAZC,GAAY,EAAZC,OAAY9C,E,IAAjB,QAAK+C,EAAAC,EAAgBb,EAAO9C,OAAAc,cAAvByC,GAAAG,EAAAC,EAAY5C,QAAAC,MAAZuC,GAAY,GAAZ,IAAMK,EAANF,EAAY9D,MACjBgE,EAASN,IACLA,EAAgBM,I,SAFfJ,GAAY,EAAZC,EAAYI,E,YAAZN,GAAY,MAAZI,EAAYzC,QAAZyC,EAAYzC,S,WAAZsC,E,MAAAC,GAQRvD,QAAQC,IAAK,UA2BbD,QAAQC,IAAK,WAMd,IACM2D,EADS,aACQC,MAAM,IAKxBC,GAAY,EAAZC,GAAY,EAAZC,OAAYvD,E,IAAjB,QAAKwD,EAAAC,GAAgBN,EAAO9D,OAAAc,cAAvBkD,GAAAG,EAAAC,GAAYrD,QAAAC,MAAZgD,GAAY,GAAZ,IAAMK,GAANF,EAAYvE,MAWKyE,KAAWA,GAAOC,cAAgBD,GAAOE,cAAgBF,GAAOC,e,SAXjFL,GAAY,EAAZC,EAAYjD,E,YAAZ+C,GAAY,MAAZI,GAAYlD,QAAZkD,GAAYlD,S,WAAZ+C,E,MAAAC,GAqBJhE,QAAQC,IAAK,WASJ,qCAWMmE,cAAcP,MAAM,KAAKS,KAAK,KAM7CtE,QAAQC,IAAK,WAId,IAcMsE,GAdS,CAAC,EAAG,GAAI,GAAI,IAcJpC,OAbR,CAAC,GAAI,GAAI,KAiBnBqC,IAAY,EAAZC,IAAY,EAAZC,QAAYjE,E,IAAjB,QAAKkE,GAAAC,GAAgBL,GAAOzE,OAAAc,cAAvB4D,IAAAG,GAAAC,GAAY/D,QAAAC,MAAZ0D,IAAY,GAAZG,GAAYjF,O,SAAZ+E,IAAY,EAAZC,GAAY3D,E,YAAZyD,IAAY,MAAZI,GAAY5D,QAAZ4D,GAAY5D,S,WAAZyD,G,MAAAC,IAOJ1E,QAAQC,IAAK,WA2CjBD,QAEYC,IAAK,SAsBlBD,QAAQC,IAAK,aAERD,QAAQC,IAAK,mCAqCbD,QAAQC,IAAK,4CAKlB,IAAM4E,GAAW,SAAUC,G,IAElBC,GAAU,EAAVC,GAAU,EAAVC,OAAUxE,E,IAAf,QAAKyE,EAAAC,EAAcL,EAAKhF,OAAAc,cAAnBmE,GAAAG,EAAAC,EAAUtE,QAAAC,MAAViE,GAAU,EAAVG,EAAUxF,M,SAAVsF,GAAU,EAAVC,EAAUlE,E,YAAVgE,GAAU,MAAVI,EAAUnE,QAAVmE,EAAUnE,S,WAAVgE,E,MAAAC,KAKTJ,GAAS,CAAE,QAAS,OAAQ,OAAQ,SACpCA,GAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IACtBA,GAAS,CAAE,aAAwB,WAAoB,SAOlD7E,QAAQC,IAAK,2BAkCbD,QAAQC,IAAK,sDA0BdD,QAAQC,IAAK,yEA6BZD,QAAQC,IAAK,kBAoCbD,QAAQC,IAAK,wDAoDbD,QAAQC,IAAK,YA+BjBD,QAESC,IAAK,+CA4BVD,QAAQC,IAAK,qBA0BbD,QAAQC,IAAK,qBAuBjBD,QAGQC,IAAI,yBAyCJD,QAAAC,IAAI,aAKZD,QAAQC,IAAI,aAKZD,QAAQC,IAAI,uBAGTD,QAAQC,IAAmB,a","sources":["node_modules/@swc/helpers/lib/_type_of.js","src/js/00-test.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _typeof;\nfunction _typeof(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n;\n","\n{    console.log(`ЗАДАЧА 1 - сумма зарплат работников`);\n    /*\n    * Напишите скрипт, который подсчитывает общую сумму зарплат работников.\n    * Кол-во работников хранится в переменной employees.\n    * Зарплата каждого работника это случайное число от 500 до 5000.\n    * Записать сумму в переменную totalSalary и вывестви в консоль.\n    */\n\n    // 1. Записать переменные\n    const minSalary = 500;\n    const maxSalary = 5000;\n    const employees = 15;\n    let totalSalary = 0;\n\n    // 2. Перебрать работников в цикле\n    for (let i = 1; i <= employees; i += 1) {\n    \n        // 3. Сгенерировать случайную з. п. \n        const salary = Math.round(\n            Math.random() * (maxSalary - minSalary) + minSalary);\n\n        // console.log(`ЗП работника номер ${i} - ${salary}`)\n\n        // 4. Суммировать все з.п.\n        totalSalary += salary;\n\n    }\n    // 5. Лог\n    // console.log('totalSalary; ', totalSalary);\n}\n\n{    console.log(`ЗАДАЧА 2 - сумма четных чисел`);\n    /*\n    * Напишите скрипт, который подсчитывает сумму всех чётных чисел,\n    * которые входят в диапазон чисел в переменных от min до max.\n    * Например, если min=0 и max=5, то в нём два чётных числа - 2 и 4, их сумма 6\n    * \n    */\n\n\n\n}\n\n{    console.log(`ЗАДАЧА 3 - обработка покупки в магазине`);\n    /*\n    * Напишите скрипт, обработки покупки в магазине.\n    * \n    * - Баланс пользователя хранится в переменной balance\n    * - Сумма покупки хранится в переменной payment\n    * \n    * - Перед проверкой вывести сообщение:\n    * \"Общая стоимость заказа (число) кредитов. Проверяем кол-во доступных средсв на счету\"\n    * \n    * - Если сумма покупки не превышает баланс:\n    *   - Вычесть из баланса сумму покупки\n    *   - Вывести сообщение \"НА счету осталось (число) кредитов\"\n    * - Если сумма покупки превышает баланс:\n    *   - Вывести сообщение \"На счету недостаточно средств для проведения операции!\"\n    * - В конце вы вывесьи сообщение \"Операция завершена\"\n    */\n\n\n\n}\n\n{    console.log(`Task 4`);\n    /* Напиши скрипт подсчета суммы покупки со скидкой в зависимости \n    *от потраченной суммы за всё время (партнёрская программа).\n    * \n    * - Общая сумма потреченного хранится в переменной totalSpent\n    * - Сумма текущего платежа хранится в переменной payment\n    * - Скидка хранится в переменной discount\n    * \n    * - Если потрачено от [100 до 1000) - бронзовый партнёр, скидка 2%\n    * - Если потрачено от [1000 до 5000) - серебряный партнёр, скидка 5%\n    * - Если потрачено больше [5000 - золотой партнёр, скидка 10%\n    * - Если потрачено меньше 100) - не партнёр, скидка 0%\n    * \n    * - В результате вывести сообщение\n    * \"Оформляем заказ на сумму (сумма) со скидкой (скидка)%\"\n    */\n\n    // const totalSpent = 2000;\n    // let payment = 500;\n    // let discount = 0;\n\n    //'Бронзовый партнёр, скидка 2%'\n    //'Серебряный партнёр, скидка 5%'\n    //'Золотой партнёр, скидка 10%'\n    //'У Вас ещё нет партнёрской скидки%'\n\n}\n\n{    console.log(`Task 5`);\n    /*\n    *Посчитать общую сумму покупок в корзине\n   */\n    \n    const cart = [54, 28, 105, 70, 92, 120, 45, 54, 78, 87];\n    let total = 0;\n\n    // for (let i = 0; i < cart.length; i += 1) {\n    //     // console.log(cart[i]);\n    //     total += cart[i];\n    // }\n\n    for (const value of cart) {\n        total += value;\n    }\n    // console.log(`Total: `, total);\n\n}\n\n{    console.log(`Task 6.1`);\n    /*\n    * Напиши скрипт, который подсчитывает сумму всех четных чисел в массиве. \n   */\n    \n    const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 11];\n    let total = 0;\n    // 1. Переменная тотал\n    // 2. Перебрать массив\n    for (let i = 0; i < numbers.length; i += 1) {\n        // console.log(numbers[i]);\n    \n        \n    // 3. На каждой итерации проверить четность элемента\n    if (numbers[i] % 2 === 0) {\n        // console.log(`Четное `);\n\n    // 4. Если четное - плюсуем к тотал\n        total += numbers[i];\n   }     \n}\n    // console.log(`Total: `, total);\n\n}\n\n{    console.log(`Task 6.2`);\n    /*\n    * Напиши скрипт, который подсчитывает сумму всех четных чисел в массиве. \n   */\n        const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 11];\n    let total = 0;\n\n    for (const number of numbers) {\n        // console.log(number);\n\n        if (number % 2 === 0) {\n            // console.log(`${number} - Четное!!!`);\n        \n            total += number;\n        }\n    }\n    // console.log(`Total: `, total);\n}\n\n{    console.log(`Task 6.3`);\n    /*\n    * Напиши скрипт, который подсчитывает сумму всех четных чисел в массиве. \n   */\n        const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 11];\n    let total = 0;\n\n    for (const number of numbers) {\n        // console.log(number);\n\n        if (number % 2 !== 0) {\n            // console.log(number, `Эту итерацию пропустить`);\n            continue;\n        }\n        // console.log(`${number} - Четное!!!`);\n        total += number;\n        \n    }\n    // console.log(`Total: `, total);\n}\n\n{    console.log(`Task 7.1`);\n\n/* Напиши скрипт поиска логина\n* - Если логина нет, вывести сообщение \"Пользователь [логин] не найден.\"\n* - Если нашли логин, вывести сообщение \"Пользователь [логин] найден.\"\n*\n* - Через for\n*/\n\n    const logins = [`m4ngoDoge`, `k1widab3st`, `poly1scute`, `aj4xth3m4n`];\n    const loginToFind = `poly1scute`;\n    let message = `Пользователь ${loginToFind} не найден.`;\n\n    for (let i = 0; i < logins.length; i += 1) {\n        const login = logins[i];\n\n        // console.log(`Login: `, login);\n\n        if (login === loginToFind) {\n            message = `Пользователь ${loginToFind} найден.`;\n            break;\n        }\n    }\n    // console.log(message);\n}\n\n{    console.log(`Task 7.2`);\n/* Напиши скрипт поиска логина\n* - Если логина нет, вывести сообщение \"Пользователь [логин] не найден.\"\n* - Если нашли логин, вывести сообщение \"Пользователь [логин] найден.\"\n*\n* - Через for...of\n*/\n    const logins = [`m4ngoDoge`, `k1widab3st`, `poly1scute`, `aj4xth3m4n`];\n    const loginToFind = `k1widab3st`;\n    let message = `Пользователь ${loginToFind} не найден.`;\n    \n    for (const login of logins) {\n                if (login === loginToFind) {\n            message = `Пользователь ${loginToFind} найден.`;\n            break;\n        }\n\n    }\n    // console.log(message);\n\n}\n\n{    console.log(`Task 7.3`);\n/* Напиши скрипт поиска логина\n* - Если логина нет, вывести сообщение \"Пользователь [логин] не найден.\"\n* - Если нашли логин, вывести сообщение \"Пользователь [логин] найден.\"\n*\n* - Через break\n*/\n\n\n}\n\n{    console.log(`Task 7.4`);\n\n    /* Напиши скрипт поиска логина\n    * - Если логина нет, вывести сообщение \"Пользователь [логин] не найден.\"\n    * - Если нашли логин, вывести сообщение \"Пользователь [логин] найден.\"\n    *\n    * - Метод include() с тернарным оператором\n    */\n    const logins = [`m4ngoDoge`, `k1widab3st`, `poly1scute`, `aj4xth3m4n`];\n    const loginToFind = `poly1scute`;\n\n\n\n    const message = logins.includes(loginToFind) ? `Пользователь ${loginToFind} найден.` : `Пользователь ${loginToFind} не найден.`;\n\n    // console.log(message);\n\n}\n\n{    console.log(`Task 8`);\n/* Напиши скрипт поиска самого маленького/большого числа в массиве,\n* при условии, что числа уникальные (не повторяются).\n*\n*/\n\n    const numbers = [51, 18, 13, 24, 7, 85, 19];\n    let smallestNumber = numbers[0];\n\n    for (const number of numbers) {\n    if (number < smallestNumber) {\n            smallestNumber = number;\n        }\n    }\n    // console.log(smallestNumber);\n\n        let biggestNumber = numbers[0];\n\n        for (const number of numbers) {\n    if (number > biggestNumber) {\n            biggestNumber = number;\n        }\n    }\n    // console.log(biggestNumber);\n}\n\n{    console.log(`Task 9`);\n/* Напиши скрипт, который объединяет все элементы массива в одно строковое значение.\n*\n* Элементов может быть произвольное кол-во.\n* Пусть элементы массива в строке будут разделены запятой.\n* \n* - Сначала через for(),\n* - Потом через join()\n* - \n*/\n\n    const friends = [`Mango`, `Kiwi`, `Poly`, `Ajax`, `Bread`];\n    // let string = '';\n    // Должно получиться: Mango,Kiwi,Poly,Ajax\n\n//     for (const friend of friends) {\n//         string += friend + ', ';\n//     }\n// string = string.slice (0, string.length - 2)\n//     console.log(string);\n\n    // const string = friends.join(', ');\n    // console.log(friends);\n    // console.log(string);\n\n}\n\n{    console.log(`Task 10`);\n/* Напиши функцию changeCase(string), которая заменяет регистр\n* каждого символа в строе на противоположный.\n* Например, если строка \"JavaScript\", то на выходе должна быть строка \"jAVAsCRIPT\".\n*/\n\n    const string = 'JavaScript';\n    const letters = string.split('');\n    let invertedString = '';\n\n    // console.log(letters);\n\n    for (const letter of letters) {\n        // console.log(letter);\n\n        // if (letter === letter.toLowerCase()) {\n        //     console.log(`Эта буква в нижнем регистре!!! - `, letter);\n\n        //     invertedString += letter.toUpperCase();\n        // } else {\n        //     invertedString += letter.toLowerCase();\n        // }\n\n        invertedString += letter === letter.toLowerCase() ? letter.toUpperCase() : letter.toLowerCase();\n    }\n    // console.log(invertedString);\n\n\n\n\n\n}\n\n{    console.log(`Task 11`);\n/* Делаем slug в URL из названия статьи (например на dev.to)\n* Заголовок статьи состоит только из букв и пробелов \n* - Нормализируем строку\n* - Разбиваем по словам\n* - Сшиваем в строку с разделителями\n*/\n\n    // Должно получиться top-10-benefits-of-react-framework\nconst title = 'Top 10 benefits of React framework'\n\n    // const normalizedTitle = title.toLowerCase();\n    // console.log(normalizedTitle);\n\n    // const words = normalizedTitle.split(' ');\n    // console.log(words);\n\n    // const slug = words.join('-');\n    // console.log(slug);\n\nconst slug1 = title.toLowerCase().split(' ').join('-');\n\n    // console.log(slug1);\n    \n}\n\n{    console.log(`Task 12`);\n/* Напиши скрипт, который считает сумму элементов двух массивов\n*/\n\n    const array1 = [5, 10, 15, 20];\n    const array2 = [10, 20, 30];\n    let total = 0;\n\n    // for (let i = 0; i < array1.length; i += 1) {\n    //     total += array1[i];\n    // }\n\n    // for (let i = 0; i < array2.length; i += 1) {\n    //     total += array2[i];\n    // }\n\n    // console.log(total);\n\n    const numbers = array1.concat(array2);\n\n    // console.log(numbers);\n\n    for (const number of numbers) {\n        total += number;\n    }\n\n    // console.log(total);\n}\n\n{    console.log(`Task 13`);\n/* Работаем с коллекцией карточек в trello\n* - Метод splice()\n* - Удалить\n* - Добавить\n* - Обновить\n*/\n\n    const cards = ['Карточка-1', 'Карточка-2', 'Карточка-3', 'Карточка-4', 'Карточка-5', '0'];\n\n    // console.table(cards);\n/* \n* Удаление (по индуксу), метод indexOf()\n*/\n\n    // const cardToRemove = 'Карточка-3';\n    // const index = cards.indexOf(cardToRemove);\n\n    // console.log(index);\n\n    // cards.splice(index, 1);\n    \n    // console.table(cards);\n\n    /* \n    * Добавление (по индуксу)\n   */\n    // const cardToInsert = 'Карточка-6';\n    // const index = 3;\n    // cards.splice(index, 0, cardToInsert)\n\n    // console.table(cards);\n\n\n    /*\n    * Обновление (по индексу)\n   */\n    \n    // const cardToUpdate = 'Карточка-4';\n\n    // cards.splice(cards.indexOf(cardToUpdate), 1, 'Обновленная Карточка-4');\n\n    // console.table(cards);\n}\n\n{    console.log(`Task `);\n/* Напиши \n*\n*\n*\n*\n* - \n* - \n* - \n* - \n*\n* - \n*/\n\n\n\n\n\n}\n\n\n\nconsole.log(`Functions`);\n\n{    console.log(`Task F-1 - массив чисел + сумма`);\n/* Напиши функцию calculateTotalPrice(items)\n* которая принимает массив цен (чисел) и возвращает их сумму\n*\n*/\n\n\n// const cart = [54, 28, 105, 70, 92, 17, 120, 12, 25, 90];\n// let total = 0;\n\n// for (const value of cart) {\n//     total +=value;\n// }\n\n\n// console.log(`Total: `, total);\n\nconst calculateTotalPrice = function (items){\n    console.log(`items внутри функции: `, items);\n\n    let total = 0\n\n    for (const item of items) {\n        total += item;\n        \n    }\n    return total;\n}\n\n// console.log(calculateTotalPrice([1, 2, 3])); // 6\n// console.log(calculateTotalPrice([5, 10, 15, 20])); // 50\n// console.log(calculateTotalPrice([100, 200, 300])); // 600\n// console.log(calculateTotalPrice([54, 28, 105, 70, 92, 17, 120, 12, 25, 90])); \n\n\n}\n\n{    console.log(`Task F-2 - перебор + логирование массива`);\n/* Напиши функцию logItems(items) для перебора и логирования массива\n*\n*/\n\nconst logItems = function (items){\n\n    for (const item of items) {\n        // console.log(item);\n    }\n}\n\nlogItems([`Mango`, `Kiwi`, `Poly`, `Ajax`]);\nlogItems([1, 2, 3, 4, 5]);\nlogItems([`клавиатура`, `наушники`, `часы`]);\n\n\n\n\n}\n\n{    console.log(`Task F-3 - поиск логина`);\n/* Напиши функцию findLogin(allLogins, login) для поиска логина\n*\n* - Если логина нет, вывести сообщение \"Пользователь [логин] не найден.\"\n* - Если нашли логин, вывести сообщение \"Пользователь [логин] найден.\"\n*/\n\nconst logins = [`m4ngoDoge`, `k1widab3st`, `poly1scute`, `aj4xth3m4n`];\n\n\n// const findLogin = function (allLogins, loginToFind) {\n//     for (const login of allLogins) {\n//         if (login === loginToFind) {\n//             return `Пользователь ${loginToFind} найден.`;\n//        }\n//     }\n//     return `Пользователь ${loginToFind} не найден.`;   \n\n\nconst findLogin = function (allLogins, loginToFind) {\n    return allLogins.includes(loginToFind)\n        ? `Пользователь ${loginToFind} найден.`\n        : `Пользователь ${loginToFind} не найден.`;\n}\n// console.log(findLogin(logins, `m4ngoDoge`));\n// console.log(findLogin(logins, `k1widab3st`));\n// console.log(findLogin(logins, `poly1scute`));\n// console.log(findLogin(logins, `aj4xth3m4n`));\n// console.log(findLogin(logins, `ajdfdxth4n`));\n// console.log(findLogin(logins, `aj4xtdfd4n`));\n\n\n}\n\n{    console.log(`Task F-4 - поиск самого маленького числа в массиве`);\n/* Напиши функцию findSmallesNumber(numbers) для поиска самого маленького числа в массиве.\n* при условии, что числа уникальные (не повторяются).\n*/\n\n\n\n    // console.log(`smallestNumber: `, smallestNumber);\n\n    const findSmallesNumber = function (numbers) {\n        let smallestNumber = numbers[0];\n    for (const number of numbers) {\n        if (number < smallestNumber) {\n            smallestNumber = number;\n        }\n    }\n        return smallestNumber;\n}\n\n// console.log(findSmallesNumber([3, 8, 12, -2, 15])); // -2\n// console.log(findSmallesNumber([100, 54, 8, 12, 47])); // 8\n// console.log(findSmallesNumber([7, 21, 84, 15, 4])); // 4\n// console.log(findSmallesNumber([51, 18, 13, 24, 7, 85, 19])); // 7\n\n}\n\n{   console.log(`Task F-5 - замена регистра каждого символа в строе на противоположный`);\n    \n/* Напиши функцию changeCase(string), которая заменяет регистр\n    * каждого символа в строе на противоположный.\n    * Например, если строка \"JavaScript\", то на выходе должна быть строка \"jAVAsCRIPT\".\n    */\n\n    const changeCase = function (string) {\n        const letters = string.split('');\n        let invertedString = '';\n\n        for (const letter of letters) {\n            const isInLowerCase = letter === letter.toLowerCase();\n\n            invertedString += isInLowerCase ? letter.toUpperCase() : letter.toLowerCase();\n        }\n\n        // console.log('invertedString: ', invertedString);\n    \n        return invertedString;\n\n        \n    }\n\n    // console.log(changeCase('qweRTY'));\n    // console.log(changeCase('mAnGo'));\n    // console.log(changeCase('AjAx'));\n}\n    \n{    console.log(`Task F-6 - URL`);\n/* Напиши функцию slugigy(string), которая получает строку и возвращает URL-slug\n* Строка состоит только из букв и пробелов\n*/\n\n\n    // const title = 'Top 10 benefits of React framework';\n\n    // const normalizedTitle = title.toLowerCase();\n    // const words = normalizedTitle.split(' ');\n    // const slug = words.join('-');\n\n    // const slug1 = title.toLowerCase().split(' ').join('-');\n\n    // console.log(slug1);\n\n    const slugify = function (string) {\n    // const normalizedTitle = string.toLowerCase();\n    // const words = normalizedTitle.split(' ');\n    // const slug = words.join('-');\n\n        \n        return string.toLowerCase().split(' ').join('-');\n    }\n\n\n    // console.log(slugify('Top 10 benefits of React framework'));\n    // console.log(slugify('Azure Static Web Apps are Awesome'));\n    // console.log(slugify('Technical writing tips for non-native English speakers'));\n    \n    \n\n\n\n}\n\n{    console.log(`Task F-7 - Псевдомассив argunents и Array.from и ...`);\n\n/*\n* Псевдомассив argunents и Array.from и ...\n*/\n    \n    // const fn = function () {\n    //     console.log(arguments);\n\n    //     const args = Array.from(arguments);\n\n    //     console.log(args);\n    // };\n\n    // fn(1, 2, 3, 4);\n    // fn(1, 2, 3, 4, 5, 6);\n    // fn(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\n\n    // const fn = function (a, b, c, ...args) {\n    //     console.log(`${a} ${b} ${c}`);\n    //    console.log(args);\n    // };\n\n    // fn('hello', 1, 2, 3, 4);\n    // fn('aloha', 1, 2, 3, 4, 5, 6);\n    // fn('hi', 1, 2, 3, 4, 5, 6, 7, 8, 9);\n\n/* Напиши функцию add для сложения произвольного количества аргументов (чисел)\n* - Array.from()\n* - Операция ... (rest)\n*/\n\n    const add = function (...args) {\n        console.log(args);\n        let total = 0;\n\n        for (const arg of args) {\n            total += arg;\n        }\n\n        return total;\n    };\n\n\n    // console.log(add(1, 2, 3,));\n    // console.log(add(1, 2, 3, 4, 5, 6));\n    \n\n\n}\n\n{    console.log(`Task F-8`);\n/*  \n* Напиши функцию filterNumbers(array [, number1, ...]), которая:\n* - первым аргументом принимает массив чисел\n* - после первого аргуметна может быть произвольное количество других аргументов, которые будут числами.\n* - Функция должна вернуть новый массив, в котором будут только те аргументы, начиная со второго,\n*  для которых есть аналог в ориганальном массиве.\n*/\n\n    const filterNumbers = function (array, ...args) {\n        // console.log('array: ', array);\n        // console.log('args: ', args);\n        const uniqueElements = [];\n\n        for (const element of array) {\n            if (args.includes(element)) {\n                uniqueElements.push(element);\n\n                // console.log(`${element} есть везде!`);\n            }\n        }\n        // return uniqueElements;\n    };\n\n        // console.log(filterNumbers([1, 2, 3, 4, 5], 10, 15, 2, 3, 8)); // [2, 3]\n        // console.log(filterNumbers([10, 15, 25, 30], 23, 30, 18, 15)); // [30, 15]\n        // console.log(filterNumbers([100, 200, 300, 400, 500], 7, 12, 200, 64)); // [200]\n\n\n\n\n}\n\n{ console.log(`Function + Function (Freelancer - Рекурсия)`);\n\n    // function calcSumm(numOne, numTwo) {\n    //     let result = 1;\n    //     // Умножаем result на numOne numTwo раз в цикле\n    //     for (let i = 0; i < numTwo; i++) {\n    //         result *= numOne;\n    //     }\n    //     return result;\n    // }\n    // console.log(calcSumm(5, 3));\n\n    // function calcSumm(numOne, numTwo) {\n    //     if (numTwo === 1) {\n    //         return numOne;\n    //     } else {\n    //         return numOne * calcSumm(numOne, numTwo - 1);\n    //     }\n    // }\n    // console.log(calcSumm(5, 3));\n\n\n}\n\n\n\n\n\n{    console.log(`Task AutoCheck-21`);\n/* Напиши функцию findLongestWord(string) которая принимает произвольную\n* строку состоящую только из слов разделённых пробелом (параметр string) и\n* возвращает самое длинное слово в этой строке.\n*/\n    function findLongestWord(string) {\n\n        let arrayWords = 0;\n        arrayWords = string.split(' ');\n        // console.log(arrayWords);\n\n        let maxWord = arrayWords[0];\n        for (let arrayWord of arrayWords) {\n            // console.log(arrayWord);\n\n            if (arrayWord.length > maxWord.length) {\n                 maxWord = arrayWord;\n                // console.log(maxWord);\n            } \n        } return maxWord;\n    }\n        // console.log(findLongestWord(\"The quick brown fox jumped over the lazy dog\")) // jumped\n        // console.log(findLongestWord(\"Google do a roll\")) // Google\n        // console.log(findLongestWord(\"May the force be with you\")) // force\n}\n\n{    console.log(`Task AutoCheck-22`);\n/* Дополни код функции createArrayOfNumbers(min, max) так, чтобы она возвращала\n* массив всех целых чисел от значения min до max. \n* - В цикле for использовался метод push\n* **** В автопроверке работает !!!\n*/ \n\nfunction createArrayOfNumbers(min, max) {\n  const numbers = [];\n  // Change code below this line\nfor (i = min; i <= max; i += 1) {\n numbers.push(i);\n}\n\n\n  // Change code above this line\n//   return numbers;\n}\n\n    // console.log(createArrayOfNumbers(1, 3)); // [1, 2, 3]\n    // console.log(createArrayOfNumbers(14, 17)); // [14, 15, 16, 17]\n    // console.log(createArrayOfNumbers(29, 34)); // [29, 30, 31, 32, 33, 34]\n\n}\n\n\n{console.log('Example: Кнопочки + -')\n    \n    \n    // const counter = {\n    //     value: 0,\n    //     increment() {\n    //         console.log('increment -> this', this);\n    //         this.value += 1;\n    //     },\n    //     decrement() {\n    //         console.log('decrement -> this', this);\n    //         this.value -= 1;\n    //     },\n    // };\n    \n    // const decrementBtn = document.querySelector('.js-decrement');\n    // const incrementBtn = document.querySelector('.js-increment');\n    // const valueEl = document.querySelector('.js-value');\n    \n    // console.log(decrementBtn);\n    // console.log(incrementBtn);\n    // console.log(valueEl);\n\n    // decrementBtn.addEventListener('click', function () {\n    //     console.log('Кликнули на декремент');\n\n    //     counter.decrement();\n    //     console.log(counter);\n    //     valueEl.textContent = counter.value;\n    // });\n    \n    // incrementBtn.addEventListener('click', function () {\n    //     console.log('Кликнули на инкремент');\n\n    //     counter.increment();\n    //     console.log(counter);\n    //     valueEl.textContent = counter.value;\n    // });\n\n}\n\n{console.log('Example: ')\n\n    \n}\n\n{console.log('Example: ')\n\n\n}\n\n{console.log('Example: Переменные')\n\n    let userName;\n    console.log(typeof userName)\n    \n    \n    \n    \n    \n    \n    \n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["Object","defineProperty","module","exports","value","default","obj","constructor","Symbol","parcelRequire","console","log","$ed8caeb92d3064e7$var$i","Math","round","random","$ed8caeb92d3064e7$var$_iteratorNormalCompletion","$ed8caeb92d3064e7$var$_didIteratorError","$ed8caeb92d3064e7$var$_iteratorError","undefined","$ed8caeb92d3064e7$var$_step","$ed8caeb92d3064e7$var$_iterator","iterator","next","done","err","return","$ed8caeb92d3064e7$var$numbers","$ed8caeb92d3064e7$var$i1","length","$ed8caeb92d3064e7$var$_iteratorNormalCompletion1","$ed8caeb92d3064e7$var$_didIteratorError1","$ed8caeb92d3064e7$var$_iteratorError1","$ed8caeb92d3064e7$var$_step1","$ed8caeb92d3064e7$var$_iterator1","$ed8caeb92d3064e7$var$number","$ed8caeb92d3064e7$var$_iteratorNormalCompletion2","$ed8caeb92d3064e7$var$_didIteratorError2","$ed8caeb92d3064e7$var$_iteratorError2","$ed8caeb92d3064e7$var$_step2","$ed8caeb92d3064e7$var$_iterator2","$ed8caeb92d3064e7$var$number1","$ed8caeb92d3064e7$var$logins","$ed8caeb92d3064e7$var$loginToFind","$ed8caeb92d3064e7$var$i2","concat","$ed8caeb92d3064e7$var$loginToFind1","$ed8caeb92d3064e7$var$_iteratorNormalCompletion3","$ed8caeb92d3064e7$var$_didIteratorError3","$ed8caeb92d3064e7$var$_iteratorError3","$ed8caeb92d3064e7$var$_step3","$ed8caeb92d3064e7$var$_iterator3","$ed8caeb92d3064e7$var$loginToFind2","includes","$ed8caeb92d3064e7$var$numbers3","$ed8caeb92d3064e7$var$smallestNumber","$ed8caeb92d3064e7$var$_iteratorNormalCompletion4","$ed8caeb92d3064e7$var$_didIteratorError4","$ed8caeb92d3064e7$var$_iteratorError4","$ed8caeb92d3064e7$var$_step4","$ed8caeb92d3064e7$var$_iterator4","$ed8caeb92d3064e7$var$number2","$ed8caeb92d3064e7$var$biggestNumber","$ed8caeb92d3064e7$var$_iteratorNormalCompletion5","$ed8caeb92d3064e7$var$_didIteratorError5","$ed8caeb92d3064e7$var$_iteratorError5","$ed8caeb92d3064e7$var$_step5","$ed8caeb92d3064e7$var$_iterator5","$ed8caeb92d3064e7$var$number3","err1","$ed8caeb92d3064e7$var$letters","split","$ed8caeb92d3064e7$var$_iteratorNormalCompletion6","$ed8caeb92d3064e7$var$_didIteratorError6","$ed8caeb92d3064e7$var$_iteratorError6","$ed8caeb92d3064e7$var$_step6","$ed8caeb92d3064e7$var$_iterator6","$ed8caeb92d3064e7$var$letter","toLowerCase","toUpperCase","join","$ed8caeb92d3064e7$var$numbers4","$ed8caeb92d3064e7$var$_iteratorNormalCompletion7","$ed8caeb92d3064e7$var$_didIteratorError7","$ed8caeb92d3064e7$var$_iteratorError7","$ed8caeb92d3064e7$var$_step7","$ed8caeb92d3064e7$var$_iterator7","$ed8caeb92d3064e7$var$logItems","items","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator"],"version":3,"file":"file.789ca9fc.js.map"}