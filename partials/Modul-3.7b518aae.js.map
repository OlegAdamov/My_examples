{"mappings":"AAAAA,QAAQC,IAAI,YAEVD,QAAQC,IAAI,gCAsDbD,QAESC,IAAI,4BAoIWD,QAAfC,IAAI,wBAkCAD,QAAJC,IAAI,qBAqEID,QAARC,IAAI,6BAmBED,QAAPC,IAAI,sCAuDgB,CAAxBD,QAAQC,IAAI,qBASjB,MAIMC,EAAY,IAJO,CAAC,GAAI,GAAI,OACR,CAAC,GAAI,GAAI,GAAI,OACd,CAAC,GAAI,GAAI,GAAI,GAAI,KAIxBC,KAAKC,OAAOF,GAEPC,KAAKE,OAAOH,GAO9BF,QAAQC,IAAI,qBAsCZD,QAAQC,IAAI,qBA8BZD,QAAQC,IAAI,qBAyEhBD,QAEYC,IAAI","sources":["src/js/Mod3-Lesson6.js"],"sourcesContent":["console.log('Repeta: ');\n\n{ console.log('Операция spread (распыление)')\n/* \n* - Array.prototype.concat() м аналог через spread\n* - [].concat() - то же самое\n*/\n\n\n    // const numbers = [1, 2, 3].concat([4, 5, 6], [7, 8, 9]);\n    \n    const numbers = [ ...[1, 2, 3], ...[4, 5, 6], ...[7, 8, 9]];\n\n    // console.log(numbers);\n\n    /* \n    * Поиск самой маленькой или большой температуры (числа)\n    */\n    const temps = [18, 14, 12, 21, 17, 29, 24]\n    \n    // console.log(Math.max(1, 3, 5, 12, 54, 6));\n    // console.log(Math.min(...temps))\n\n\n\n\n    /* \n    * Сшиваем несколько массивов в один через concat() и spread\n    */\n\n    const lastWeekTemps = [1, 2, 3];\n    const currentWeekTemps = [4, 5, 6];\n    const nextWeekTemps = [7, 8, 9];\n\n    const allTemps = [...lastWeekTemps, ...currentWeekTemps, ...nextWeekTemps];\n    // console.log(allTemps);\n\n    /*\n    * Распыление объектов\n   * - Object.prototype.assign() и spread\n    */\nconst a = { x: 1, y: 2 };\n    const b = {x: 0, z: 3 };\n\n// const c = Object.assign({x: 5}, a, b)\n\n    const c = {\n        ...a,\n        x: 19,\n        ...b,\n        y: 26,\n}\n    // console.log(c);\n\n\n    \n}\n\n{ console.log('Деструктуризация объекта')\n/* \n* - Значения по умолчанию\n* - Имя переменной отличное от имени свойства\n*/\n\n    // const playlist = {\n    //     name: 'Мой супер плейлист',\n    //     rating: 5,\n    //     tracks: ['track-1', 'track-2', 'track-3'],\n    //     trackCount: 3,\n    //     location: 'Colorado',\n    // };\n\n    // const { name, rating, tracks, trackCount: numberOfTracks, author = 'John', location = 'Paramount'} = playlist;\n\n    // console.log(name);\n    // console.log(rating);\n    // console.log(tracks);\n    // console.log(numberOfTracks);\n    // console.log(location);\n    \n\n    // console.log(name, rating, tracks, numberOfTracks, author, location);\n\n    // console.log(\n    //     playlist.name,\n    //     playlist.rating,\n    //     playlist.tracks,\n    //     playlist.trackCount,\n    // );\n\n\n\n\n\n\n    /* \n    * Глубокая деструктуризация\n    */\n    \n    // const profile = {\n    //     name: \"Jacques Gluke\",\n    //     tag: 'jgluke',\n    //     location: 'Ocho Rios, Jamaica',\n    //     avatar: 'https://s3.amazonaws.com/uifaces/faces/twittr.r_oy/128.jpg',\n    //     stats: {\n    //         followers: 5603,\n    //         views: 4827,\n    //         likes: 1308,\n    //     },\n    // };\n\n    // const { name, tag, location, avatar, stats: {followers, views, likes}, } = profile;\n\n\n    // console.log(\n    //     name, tag, location, avatar, followers, views, likes,\n    // )\n\n    /* \n    * Деструктуризация массивов\n    */\n    \n    // const rgb = [255, 100, 80];\n\n    // const [a, , c] = rgb;\n    // console.log(a, c);\n\n    // {\n    //     const authors = {\n    //         kiwi: 4,\n    //         poly: 7,\n    //         ajax: 9,\n    //         mango: 6,\n\n    //     };\n    \n    \n        // {\n        //     const ratings = Object.values(authors);\n        //     console.log(ratings);\n        //     console.log(Math.max(...ratings));\n        // }\n\n        // {\n        //     const keys = Object.keys(authors);\n        //     for (const key of keys) {\n        //         console.log(key);\n        //         console.log(authors[key]);\n        //         }\n        // }\n    \n        //    {\n        // const entries = Object.entries(authors);\n        //     // console.log(entries);\n\n        //     for (const entry of entries) {\n        //         // console.log(entry)\n        \n        //         const name = entry[0];\n        //         const rating = entry[1];\n        \n        //         console.log(name, rating);\n        //     }\n        //}\n    \n    \n        // {\n        //     const entries = Object.entries(authors);\n\n        //     for (const entry of entries) {\n        //         const [name, rating] = entry;\n\n        //         console.log(name, rating);\n        //     }\n        // }\n\n\n        // {\n        //     const entries = Object.entries(authors);\n\n        //     for (const [name, rating] of entries) {\n        //         // const [name, rating] = entry;\n\n        //         console.log(name, rating);\n        //     }\n        // }\n\n    // } \n}\n\n{ console.log('Операция rest (сбор)')\n    /* \n    * \n    */\n    \n    // const profile = {\n    //     name: \"Jacques Gluke\",\n    //     tag: 'jgluke',\n    //     location: 'Ocho Rios, Jamaica',\n    //     avatar: 'https://s3.amazonaws.com/uifaces/faces/twittr.r_oy/128.jpg',\n    //     stats: {\n    //         followers: 5603,\n    //         views: 4827,\n    //         likes: 1308,\n    //     },\n    // };\n\n// {    const { name, tag, location } = profile;\n\n//     const restProps = {\n//         avatar: profile.avatar,\n//         stats: profile.stats,\n//     }\n//     console.log(restProps)}\n\n    // {\n    //     const { name, tag, location, ...restProps } = profile;\n\n    //     console.log(name, tag, location);\n    //     console.log(restProps);\n    //     console.log(profile);\n    // }\n}\n\n{ console.log('Объект параметров')\n    // const { name, tag, location, ...resProps } = profile;\n    \n\n    // console.log(name, tag, location);\n    // console.log(rest);\n    // console.log(profile);\n    \n    /* \n    * Паттерн \"объект настроек\"\n    * - деструктуризация параметра-объекта в подписи функции\n    * - rest при деструктуризации в подписи\n    */\n\n//         {    const showProfileInfo = function (userProfile) {\n//         console.log(userProfile)\n\n\n//         const {\n//             name,\n//             tag,\n//             location,\n//             avatar,\n//             stats: { followers, views, likes },\n//     } = userProfile;\n//     console.log(name, location, tag, avatar, followers, views, likes);\n// };\n//      const profile = {\n//         name: \"Jacques Gluke\",\n//         tag: 'jgluke',\n//         location: 'Ocho Rios, Jamaica',\n//         avatar: 'https://s3.amazonaws.com/uifaces/faces/twittr.r_oy/128.jpg',\n//         stats: {\n//             followers: 5603,\n//             views: 4827,\n//             likes: 1308,\n//         },\n//     };\n//         showProfileInfo(profile);\n//     }\n    \n//     {\n//         const showProfileInfo = function ({ name,\n//             tag,\n//             location,\n//             avatar,\n//             stats: { followers, views, likes }, }) {\n        \n//     console.log(name, location, tag, avatar, followers, views, likes);\n// };\n//      const profile = {\n//         name: \"Jacques Gluke\",\n//         tag: 'jgluke',\n//         location: 'Ocho Rios, Jamaica',\n//         avatar: 'https://s3.amazonaws.com/uifaces/faces/twittr.r_oy/128.jpg',\n//         stats: {\n//             followers: 5603,\n//             views: 4827,\n//             likes: 1308,\n//         },\n//     };\n//     showProfileInfo(profile);\n//     }\n}\n\n\n\n\n\n{ console.log('Операция Object - примеры')\n\n// const book = {\n//   title: \"The Last Kingdom\",\n//   author: \"Bernard Cornwell\",\n//   genres: [\"historical prose\", \"adventure\"],\n//   rating: 8.38,\n// };\n// const keys = Object.keys(book);\n// console.log(keys); // ['title', 'author', 'genres', 'rating']\n\n// for (const key of keys) {\n//   // Ключ\n//   console.log(key);\n//   // Значение свойства\n//   console.log(book[key]);\n//     }\n}\n\n{console.log('Операция Массив Объектов - примеры')\n\n//     const books = [\n//   {\n//     title: \"The Last Kingdom\",\n//     author: \"Bernard Cornwell\",\n//     rating: 8.38,\n//   },\n//   {\n//     title: \"На берегу спокойных вод\",\n//     author: \"Роберт Шекли\",\n//     rating: 8.51,\n//   },\n//   {\n//     title: \"Сон смешного человека\",\n//     author: \"Федор Достоевский\",\n//     rating: 7.75,\n//   },\n    // ];\n    // for (const book of books) {\n        // Объект книги\n        // console.log(book);\n        // Название\n        // console.log(book.title);\n        // Автор\n        // console.log(book.author);\n        // Рейтинг\n        // console.log(book.rating);\n    // }\n    \n    // Например, получим список названий всех книг в коллекции books.\n//     const bookNames = [];\n\n// for (const book of books) {\n//   bookNames.push(book.title);\n// }\n\n// console.log(bookNames); // [\"The Last Kingdom\", \"На берегу спокойных вод\", \"Сон смешного человека\"]\n\n    \n    // Узнаем средний рейтинг всей нашей коллекции.\n//     let totalRating = 0;\n\n// for (const book of books) {\n//   totalRating += book.rating;\n// }\n\n// const averageRating = (totalRating / books.length).toFixed(1);\n// console.log(averageRating); // 8.2\n    \n}\n    \n\n\n\n{    console.log(`Task AutoCheck-28`);\n/* В переменных firstGroupScores, secondGroupScores и thirdGroupScores хранятся \n* результаты тестирования отдельных групп. Используя распыление дополни код так,\n* чтобы:\n* - В переменной allScores хранился массив всех результатов от первой до третьей группы.\n* - В переменной bestScore был самый высокий общий балл.\n* - В переменной worstScore был самый низкий общий балл. \n*/\n\nconst firstGroupScores = [64, 42, 93];\nconst secondGroupScores = [89, 14, 51, 26];\nconst thirdGroupScores = [29, 47, 18, 97, 81];\n// Change code below this line\nconst allScores = [...firstGroupScores, ...secondGroupScores, ...thirdGroupScores];\n// console.log(allScores);\nconst bestScore = Math.max(...allScores);\n    // console.log(bestScore);\n    const worstScore = Math.min(...allScores);\n    // console.log(worstScore);\n\n\n\n}\n\n{    console.log(`Task AutoCheck-30`);\n/* Напиши функцию makeTask(data) которая принимает один параметр data -\n* объект со следующими свойствами.\n* - text - текст задачи.\n* - category - категория задачи.\n* - priority - приоритет задачи\n* Функция должна составить и вернуть новый объект задачи, не изменяя\n* напрямую параметр data. В новом объекте должно быть свойство completed,\n* значение которого хранится в одноимённой локальной переменной.\n* В параметре data гарантированно будет только свойство text, а остальные два, \n* category и priority, могут отсутствовать. Тогда, в новом объекте задачи, \n* в свойствах category и priority должны быть значения по умолчанию,\n* хранящиеся в одноимённых локальных переменных. \n*/\n\nfunction makeTask(data) {\n  const completed = false;\n  const category = \"General\";\n  const priority = \"Normal\";\n  // Change code below this line\nreturn {\n  completed,\n  category,\n  priority,\n  ...data,\n\n}\n  // Change code above this line\n    }\n    // console.log(makeTask({}));\n    // console.log(makeTask({ category: \"Homemade\", priority: \"Low\", text: \"Take out the trash\" }));\n    // console.log(makeTask({ priority: \"Low\", text: \"Choose shampoo\" }));\n    // console.log(makeTask({ text: \"Buy bread\" }));\n\n\n\n}\n\n{    console.log(`Task AutoCheck-32`);\n/* Функция addOverNum() считает сумму всех аргументов. Измени параметры и тело \n* функции addOverNum() так, чтобы она считала сумму только тех аргументов,\n* которые больше чем заданное число. Это число должно быть первым\n* параметром функции.\n*/\n    \n// Change code below this line\nfunction addOverNum(firstNumber, ...args) {\n  let total = 0;\n\n  for (const arg of args) {\n    if (arg > firstNumber)\n    {total += arg;}\n    \n  }\n\n  return total;\n  // Change code above this line\n}\n\n    // console.log(addOverNum(50, 15, 27));\n    // console.log(addOverNum(10, 12, 4, 11, 48, 10, 8));\n    // console.log(addOverNum(15, 32, 6, 13, 19, 8));\n    // console.log(addOverNum(20, 74, 11, 62, 46, 12, 36));\n\n\n\n}\n\n{    console.log(`Task AutoCheck-41`);\n/* Выполни рефакторинг методов объекта atTheOldToad так, чтобы они работали не \n* с массивом строк, а с массивом объектов.\n*\n*\n*\n* - getPotions() - метод для получения всех зелий. Возвращает значение свойства potions.\n* - addPotion(newPotion) - добавляет зелье newPotion (уже объект) в массив в\n* свойстве potions, но только если такого зелья еще нет в инвентаре. В\n* противном случае возвращается строка.\n* - removePotion(potionName) - удаляет объект зелья с именем potionName из\n* массива в свойстве potions.\n* - updatePotionName(oldName, newName) - обновляет свойство name объекта-зелья с\n* названием oldName на newName в массиве potions.\n* - \n*/\n\n    \nconst atTheOldToad = {\n  potions: [\n    { name: \"Speed potion\", price: 460 },\n    { name: \"Dragon breath\", price: 780 },\n    { name: \"Stone skin\", price: 520 },\n  ],\n  // Change code below this line\n  getPotions() {\n    return this.potions;\n  },\n  addPotion(newPotion) {\n    for (const potion of this.potions) {\n      if (potion.name === newPotion.name) {\n        return `Error! Potion ${newPotion.name} is already in your inventory!`;\n      }\n    }\n       \n    this.potions.push(newPotion);\n  },\n\n\n  removePotion(potionName) {\n\n  for (let i = 0; i < this.potions.length; i += 1){\n  if (potionName === this.potions[i].name) {\n    this.potions.splice(i, 1);\n   return `Potion ${potionName} is not in inventory!`;\n  }\n  }\n  },\n  \n  updatePotionName(oldName, newName) {\n    for (let i = 0; i < this.potions.length; i += 1) {\n      if (oldName === this.potions[i].name) {\n        this.potions[i].name = newName;\n    return `Potion ${oldName} is not in inventory!`;\n      }\n    }\n  },\n  // Change code above this line\n};\n\n\n\n//     console.table(atTheOldToad.getPotions()); // [ { name: \"Speed potion\", price: 460 }, { name: \"Dragon breath\", price: 780 }, { name: \"Stone skin\", price: 520 } ]\n//     console.table(atTheOldToad.addPotion({ name: \"Invisibility\", price: 620 }));\n//     console.table(atTheOldToad.addPotion({ name: \"Power potion\", price: 270 }));\n// console.table(atTheOldToad.addPotion({ name: \"Dragon breath\", price: 700 }))\n// console.table(atTheOldToad.addPotion({ name: \"Stone skin\", price: 240 }))\n// console.table(atTheOldToad.addPotion({ name: \"Dragon breath\", price: 700 }))\n// console.table(atTheOldToad.addPotion({ name: \"Stone skin\", price: 240 }))\n// console.table(atTheOldToad.removePotion(\"Dragon breath\"))\n// console.table(atTheOldToad.removePotion(\"Speed potion\"))\n// console.table(atTheOldToad.updatePotionName(\"Dragon breath\", \"Polymorth\"))\n// console.table(atTheOldToad.updatePotionName(\"Stone skin\", \"Invulnerability potion\"))\n}\n\n{    console.log(`Task `);\n/* Напиши \n*\n*\n*\n*\n* - \n* - \n* - \n* - \n*\n* - \n*/\n\n\n\n\n\n}\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["console","log","allScores","Math","max","min"],"version":3,"file":"Modul-3.7b518aae.js.map"}