{"mappings":"YAAAA,QAAQC,IAAI,YAEXD,QAAQC,IAAI,yCAWR,IAeSC,EAAS,SAAUC,EAAGC,EAAGC,GACZA,EAASF,EAAGC,IAK/BF,EAAO,EAAG,GAAG,SAAUI,EAAGC,GACtB,OAAOD,EAAIC,KAGfL,EAAO,GAAI,IAAI,SAAUI,EAAGC,GACxB,OAAOD,EAAIC,KAKlBP,QAQIC,IAAI,kDAYqBD,QAAzBC,IAAI,yCAmBaD,QAAjBC,IAAI,wCAcYD,QAAhBC,IAAI,0CAmBSD,QAAbC,IAAI,mBA+CND,QAAEC,IAAI,uBA6BID,QAARC,IAAI,sBAgCHD,QAADC,IAAI,uBAgDFD,QAAFC,IAAI,sEA6BoCD,QAAxCC,IAAI,sBAyKKD,QAATC,IAAI,aAOZD,QAAQC,IAAI,aAOZD,QAAQC,IAAI,aAOZD,QAAQC,IAAI,aAOZD,QAAQC,IAAI,aAQZD,QAAQC,IAAI,iBAwBZD,QAAQC,IAAI,iBA4BZD,QAEQC,IAAI,eAOZD,QAAQC,IAAI,eAOZD,QAAQC,IAAI,eASXD,QAAQC,IAAI,6CAKd,IAH4B,IAAtBO,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GACvBC,EAAkB,GAEfC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,GAAK,EACnCF,EAAQE,GAAK,GACfD,EAAgBG,KAAKJ,EAAQE,IAQhCV,QAAQC,IAAI,8CAEG,CAAC,EAAG,EAAG,EAAG,EAAG,GACGY,QAAO,SAAAC,G,OAASA,EAAQ,KAIvDd,QAEQC,IAAI,gBAOZD,QAAQC,IAAI,gBAOZD,QAAQC,IAAI,gBASZD,QAAQC,IAAI,M","sources":["src/js/Mod4-Lesson7.js"],"sourcesContent":["console.log('Repeta: ');\n\n{console.log('Функция обратного вызова (callback): ');\n\n/*\n* - Функция может принимать другие функции как параметры\n* - Функцмя, которая передается другой функции как аргумент, называется\n* \"функция обратного (отложенного) вызова\" (callback-функция)\n* - Функция, которая принимает другую функцию как параметр\n* или возвращает как результат своей работы, называется\n* \"функцией высшего порядка\"\n*/\n\n{    const fnA = function (message, callback) {\n        // console.log(message);\n\n        // console.log(callback);\n        // callback(100);\n        \n    };\n    \n    const fnB = function (number) {\n        // console.log('Это лог при вызове fnB', number);\n    };\n\n        fnA('afajfsdjfls', fnB)\n}\n    {\n        const doMath = function (a, b, callback) {\n            const result = callback(a, b);\n\n            // console.log(result);\n        };\n\n        doMath(2, 3, function (x, y) { // const add = function (x, y)\n            return x + y;\n        });                         // };\n\n        doMath(26, 15, function (x, y) { //const sub = function\n            return x - y;\n        });                     // };\n\n                            // doMath(2, 3, add);\n                            // doMath(26, 15, sub);\n    }\n\n}\n\n\n\n\n\n{console.log('Example: Отложенный вызов: регистрация событий');\n\n    // const buttonRef = document.querySelector('.js-button');   //  - класс кнопки в html\n\n    // const handleBtnClick = function () {\n    //     console.log('Клик по кнопке ' + Date.now());\n    // };\n\n    // buttonRef.addEventListener('click', handleBtnClick); // - слушатель события - видає помилку, знайти, яку\n\n}\n\n{console.log('Example: Отложенный вызов: геолокация');\n\n    // const onGetPositionSuccess = function (position) {\n    //     console.log('Это вызов onGetPositionSuccess');\n    //     console.log(position);\n    // }\n    \n    // const onGetPositionError = function (error) {\n    //     console.log('Это вызов onGetPositionError');\n    //     console.log(error);\n    // }\n\n    \n    // window.navigator.geolocation.getCurrentPosition(\n    // onGetPositionSuccess,\n    //     onGetPositionError,);\n\n}\n\n{console.log('Example: Отложенный вызов: интервалы');\n\n    // const callback = function () {\n    //     console.log('Через 3 секунды внтури колбека в таймауте');\n    // };\n\n    // console.log('В коде перед таймаутом');\n\n    // setTimeout(callback, 2000);\n\n    // console.log('В коде после таймаутом');\n\n}\n\n{console.log('Example: Отложенный вызов: http-запрос');\n\n    /* \n    * - API URL: HTTPS:/pokeapi.co/api/v2/pokemon\n    */\n    \n    // const onRequestSuccess = function (response) {\n    //     console.log('Вызов функци onRequestSuccess после успешного ответа бекэнда');\n\n    //     console.log(response);\n    // };\n\n    // fetch('HTTPS:/pokeapi.co/api/v2/pokemon')\n    //     .then(res => res.json())\n    //     .then(onRequestSuccess);\n\n\n}\n\n{console.log('Example: Фильтр');\n    \n\n    // const filter = function (array, test) {\n    //     const filteredArray = [];\n\n    //     for (const el of array) {\n    //         console.log(el);\n    //         console.log(test(el));\n    //     }\n    //     return filteredArray;\n    // };\n\n    // 1. надо передать функцию\n    // 2. функция получает элемент массива\n    // 3. если элемент массива удовлетворяет условию то функция вернет true\n    // 3. если элемент массива НЕ удовлетворяет условию то функция вернет false\n    \n    // const callback1 = function (value) {\n    //     return value >= 3;\n    // }\n   \n\n    // const r1 = filter([1, 2, 3, 4, 5,], callback1)\n    // console.log(r1);\n    \n    // const r2 = filter([1, 2, 3, 4, 5, 6, 7, 8], function (value) {\n    //     return value <= 4;\n    // });\n    // console.log(r2);\n\n\n    // const fruits = [\n    //     { name: 'apples', quantity: 200, isFresh: true },\n    //     { name: 'grapes', quantity: 150, isFresh: false },\n    //     { name: 'bananas', quantity: 100, isFresh: true },\n    // ];\n\n    // const getFruitsWithQuantity = function (fruit) {\n    //     return fruit.quantity >= 120;\n    // };\n\n    // const r3 = filter(fruits, getFruitsWithQuantity);\n    // // console.log(r3);\n\n}\n\n{console.log('Функция замыкания: ');\n\n/* Функция результатом своей работы может возвращать другую функцию.\n* \n* Возвращаемая функция во время вызова будет иметь доступ\n* ко всем локальным переменным (области видимости)\n* родительской функции (той, из которой её вернули)б\n* это называется \"замыкание\".\n*/\n    \n    // const fnA = function (parameter) {\n    //     const innerVariable = 'значение втутренней переменной функции fnA';\n\n    //     const innerFunction = function () {\n            // console.log(parameter);\n            // console.log(innerVariable);\n            // console.log('Это вызов innerFunction');\n    //     };\n        \n    //     return innerFunction;\n    // };\n\n    // const fnB = fnA(45455);\n\n    // fnB();\n\n    // console.log(fnB);\n}\n\n{console.log('Example: Поварёнок');\n\n\n\n    /* \n    * \n    */\n    \n    // const makeDish = function (sheffName, dish) {\n    //     console.log(`${sheffName} готовит ${dish}`);\n    // };\n\n\n    // makeDish(`Mango`, `пирожок`);\n    // makeDish(`Mango`, `омлет`);\n    // makeDish(`Mango`, `чай`);\n    \n    // makeDish('Poly', 'котлеты');\n    // makeDish('Poly', 'супик');\n    // makeDish('Poly', 'кофе');\n\n    // const makeSheff = function (name) {\n    //     const makeDish = function (dish) {\n    //         console.log(`${sheffName} готовит ${dish}`);\n    //     };\n\n    //     return makeDish;\n    // };\n\n\n}\n\n{console.log('Example: Округлятор');\n\n    \n    // const floatingPoint = 3.326445454;\n    // const someInt = Math.round(floatingPoint); // 3\n    // const withDecimals = Number(floatingPoint.toFixed(2)); // 3.26\n\n    // console.log(Number(floatingPoint.toFixed(3)));\n    // console.log(Number(floatingPoint.toFixed(4)));\n\n    // const number1 = 5.125665;\n    // const number2 = 12.654554;\n    // console.log(Number(number1.toFixed(2)));\n    // console.log(Number(number2.toFixed(4)));\n\n    // {const rounder = function (number, places) {\n    //     return Number(number.toFixed(places))\n    // };\n\n    // console.log(rounder(3.548975, 4));\n    // console.log(rounder(3.55454, 3));\n    // console.log(rounder(3.21578, 5));\n    // console.log(rounder(3.212215465987, 7));}\n\n\n\n    // {const rounder = function (places) {\n    //     return function (number) {\n    //         return Number(number.toFixed(places))\n    //     }\n    // }\n    //     const rounder2 = rounder(2);\n    //     const rounder3 = rounder(3);\n    //     const rounder5 = rounder(5);\n    //     const rounder7 = rounder(7);\n\n    //     console.dir(rounder2);\n\n    //         console.log(rounder2(3.548975));\n    // console.log(rounder3(3.55454));\n    // console.log(rounder5(3.21578));\n    //     console.log(rounder7(3.212215465987));\n    \n    \n    // }\n\n}\n        \n{console.log('Example: Привтные данные и функции - скрытие реализации, интерфейс');\n\n    // const salaryManagerFactory = function (employeeName, baseSalary = 0) {\n    //     let salary = baseSalary;\n\n    //     const changeBy = function (amount) {\n    //         salary += amount;   // можно убрать строку\n    //     };\n    \n\n    //     return {\n    //         raise(amount) {\n    //             changeBy(amount);  // если убрать строку - выше, тогда salary += amount;\n    //         },\n    //         lower(amount) {\n    //             changeBy(amount);// если убрать строку - выше, тогда salary -= amount;\n    //         },\n    //         current() {\n    //             return `Текущая зарплата ${employeeName} - ${salary}`;\n    //         },\n    //     };\n    // };\n\n    // const salaryManager = salaryManagerFactory('Mango', 5000);\n\n    // console.log(salaryManager.current());\n\n}\n\n{console.log('Стрелочные функции');\n\n    /* \n    * - Объявление\n    * - Явный и неявный возврат\n    * - Аргумент\n    * - Неявный возврат объекта\n    */\n\n// {    const add = function (a, b, c,) {\n//         console.log(a, b, c);\n//         return a + b + c;\n//     };\n\n//         console.log(add(5, 10, 15));\n// }\n\n// {    const addArrow = (a, b, c) => {   // {} - явный возврат\n//         console.log(a, b, c);\n//         return a + b + c;\n//     };\n\n//     console.log(addArrow(12, 18, 32));\n// }\n\n// {    const addArrow = (a, b, c) => a + b + c;  // !{} - НЕявный возврат\n        \n//     console.log(addArrow(37, 25, 69));\n//     }\n    \n\n    // {const fnA = function () {\n    //     return {\n    //         a: 5,\n    //     };\n    // };\n        \n    //     console.log(fnA())\n    \n    //     const arrowFnA = () => ({arrowA: 5,})\n\n    //     console.log(arrowFnA());\n    // }\n\n    // { console.log(`Синтаксис стрелочной функции`);\n        /* \n        * \n        * - с параметрами\n        * - с одним параметром\n        * - без параметров\n        */\n\n        // const add = function (a, b) {\n        //     return a + b;\n        // };\n\n\n        // const add = (a, b) => {\n        //     console.log(`afaff`);\n        //     return a + b;\n        // }\n        // console.log(add(2, 3));\n\n\n        // const logMessage = message => {\n        //     console.log(message)\n        // };\n        // logMessage(`Привет`);\n\n\n        // const greet = () => {\n        //     console.log(`Привет`);\n        // };\n        // greet();\n\n\n\n        /*\n        * Явный и неявный возврат\n        */\n        \n\n        // const add = (a, b) => {\n        //     return a + b;\n        // }\n        // console.log(add(2, 3));\n\n\n        // const add = (a, b) => a + b;\n\n        // console.log(add(2, 3));\n\n\n\n       /*\n       * Псевдомассив arguments\n       */\n        \n        // const add = (...args) => {\n        //     console.log(args);\n        // };\n        // add(1, 2, 3, 4, 5, 6, 7);\n  //  }\n\n    // { console.log(`Контекст стрелки`)\n        \n        /* \n        * Контекст внутри стрелки определяется местом её объявления,\n        * а не вызова и ссылается на контекст родительской функции\n        */\n        \n        // const showThis = () => {   // Контекст стрелки формируется и запоминается в месте её объявления\n        //     console.log(`this in showThis: `, this);\n        // };\n\n        // showThis(); // this in showThis: window\n\n        // const user = { name: `Mango` };\n        // user.showContext = showThis;\n\n        // user.showContext(); // this in showThis: window\n\n        //         const user = {\n        //     fullName: `Mango`,\n        //             showName() {\n        //                 console.log(`this: `, this);\n        //                 console.log(`this.fullName: `, this.fullName);\n\n        //                 const inner = () => {\n        //                     console.log(`this in inner: `, this);\n        //                 };\n\n        //                 inner();\n        //     },\n        // };\n\n        // user.showName();\n\n        /*\n        * 💩 Стрелки как методы объекта\n        */\n        \n        // const user = {\n        //     fullName: `Mango`,\n        //     showName() {   //showName: () => {   - undefined 💩\n        //         console.log(`this: `, this);\n        //         console.log(`this.fullName: `, this.fullName);\n        //     },\n        // };\n\n        // user.showName();\n\n/* \n* 💩 Стрелка конструктор\n*/\n\n        // const User = function (name) {  // const User = name => {  - 💩\n        //     this.name = name;\n        // }\n\n        // console.log(new User(`Mango`));\n\n\n\n\n//   }\n    \n}\n\n{console.log('Example: ');\n\n\n\n}\n\n\n{console.log('Example: ');\n\n\n\n}\n\n\n{console.log('Example: ');\n\n\n\n}\n\n\n{console.log('Example: ');\n\n\n\n}\n\n\n{console.log('Example: ');\n\n\n\n}\n\n\n\n{console.log('Autocheck: 11');\n\n// // Change code below this line\n// const filterArray = (numbers, value) => {\n//   let filteredNumbers = [];\n\n//  numbers.forEach((number) => {\n//     if (number > value) {\n//       filteredNumbers.push(number);\n//     }\n//   });\n\n//   // Change code above this line\n//   return filteredNumbers;\n// }\n//     console.log(filterArray([1, 2, 3, 4, 5], 3));\n//     console.log(filterArray([1, 2, 3, 4, 5], 4));\n//     console.log(filterArray([1, 2, 3, 4, 5], 5));\n//     console.log(filterArray([12, 24, 8, 41, 76], 38));\n//     console.log(filterArray([12, 24, 8, 41, 76], 20));\n\n\n}\n\n{console.log('Autocheck: 13');\n\nfunction changeEven(numbers, value) {\n  // Change code below this line\n\n    let newNumbers = [];\n\nnumbers.forEach(number => {\n  if (number % 2 === 0) {\n    newNumbers.push(number + value);\n  } else {\n      newNumbers.push(number);}\n});\n    return newNumbers\n\n//   for (let i = 0; i < numbers.length; i += 1) {\n//     if (numbers[i] % 2 === 0) {\n//       numbers[i] = numbers[i] += value;\n//     }\n//   }\n  // Change code above this line\n    }\n    \n    // console.log(changeEven([1, 2, 3, 4, 5], 10));\n    // console.log(changeEven([2, 8, 3, 7, 4, 6], 10))\n    // console.log(changeEven([17, 24, 68, 31, 42], 100))\n    // console.log(changeEven([44, 13, 81, 92, 36, 54], 100))\n\n}\n\n{console.log('Autocheck: ');\n\n\n\n\n}\n\n{console.log('Autocheck: ');\n\n\n\n\n}\n\n{console.log('Autocheck: ');\n\n\n    \n\n}\n\n\n\n{ console.log('Task-Konsp: Императивное программирование');\n\nconst numbers = [1, 2, 3, 4, 5];\nconst filteredNumbers = [];\n\nfor (let i = 0; i < numbers.length; i += 1) {\n  if (numbers[i] > 3) {\n    filteredNumbers.push(numbers[i]);\n  }\n}\n\n// console.log(filteredNumbers); // [4, 5]\n\n}\n\n{console.log('Task-Konsp: Декларативное программирование');\n\nconst numbers = [1, 2, 3, 4, 5];\nconst filteredNumbers = numbers.filter(value => value > 3);\n// console.log(filteredNumbers); // [4, 5]\n\n\n}\n\n{console.log('Task-Konsp: ');\n\n\n\n\n}\n\n{console.log('Task-Konsp: ');\n\n\n\n\n}\n\n{console.log('Task-Konsp: ');\n\n\n\n\n}\n\n\n\n{console.log(': ');\n\n    \n    \n    \n    \n    \n}\n\n\n\n"],"names":["console","log","$f54ac99d09af5a5a$var$doMath","a","b","callback","x","y","$f54ac99d09af5a5a$var$numbers","$f54ac99d09af5a5a$var$filteredNumbers","$f54ac99d09af5a5a$var$i","length","push","filter","value"],"version":3,"file":"Modul-4.65872bad.js.map"}